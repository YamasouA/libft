!<arch>
ft_strlen.c/    0           0     0     644     138       `
#include "libft.h"

size_t  ft_strlen(const char *str)
{
    size_t cnt;

    cnt = 0;
    while (*str++)
        cnt++;
    return cnt;
}ft_strlcpy.c/   0           0     0     644     362       `
#include "libft.h"

size_t  ft_strlcpy(char *dst, const char *src, size_t dstsize)
{
    char    *temp_dst;
    const char  *temp_src;
    size_t  n;

    n = dstsize;
    while (dstsize--)
    {
        if (*s)
            break;
        *dst++ = *s++;
    }
    if (!dstsize)
    {
        if (n != 0)
            *d = '\0';
    }

    return ft_strlen(src);
}ft_strlcat.c/   0           0     0     644     623       `
#include "libft.h"

size_t     ft_min(size_t a, size_t b)
{
    if (a >= b)
        return b;
    return a;
}

size_t  ft_strlcat(char *dst, const char *src, size_t dstsize)
{
    size_t  n;
    size_t  len;
    const char    *temp_src;
    char    *temp_dst;

    temp_dst = dst;
    temp_src = src;    
    len = ft_min(ft_strlen(dst), dstsize);
    temp_dst = dst + len;
    n = dstsize - len;
    if (n == 0)
        return (len + ft_strlen(s));
    while (*temp_src)
    {
        if (n == 1)
            break ;
        *temp_dst++ = *temp_src++;
        n--;
    }
    *dst = '\0';
    return len + ft_strlen(src);
}
ft_strrchr.c/   0           0     0     644     234       `
#include "libft.h"

char    *ft_strrchr(const char *s, int c)
{
    char    *temp_s;

    while (*s++);
    if (c == 0)
        return s;

    while (*s--)
    {
        if (*s == c)
            return s;
    }
    
    return NULL;
}ft_strnstr.c/   0           0     0     644     418       `
#include "libft.h"

char *ft_strnstr(const char *haystack, const char *needle, size_t len)
{
    size_t  n;

    n = ft_strlen(needle);
    if (n == 0)
        return (char *)haystack;
    if (n > len)
        return NULL;
    while (strncmp((haystack, needle, n) != 0))
    {
        haystack++;
        if (ft_strlen(haystack) < n || len < n)
            return NULL;
        len--;
    }
    
    return haystack;
}ft_strncmp.c/   0           0     0     644     366       `
#include "libft.h"

int ft_strncmp(const char *s1, const char *s2, size_t n)
{
    unsigned char   *temp_s1;
    unsigned char   *temp_s2;

    temp_s1 = (unsigned char *)s1;
    temp_s2 = (unsigned char *)s2;
    while (n--)
    {
        if (*temp_s1 != *temp_s2)
            return *temp_s1 - *temp_s2;
        temp_s1++;
        temp_s2++;
    }
    return 0;
}
ft_memset.c/    0           0     0     644     203       `
#include "libft.h"

void    *ft_memset(void *buf, int ch, size_t n)
{
    unsigned char   *temp;

    temp = (unsigned char *)buf;

    while (n--)
        *temp++ = (unsigned char)ch;

    return buf;
}
ft_bzero.c/     0           0     0     644     154       `
#include <stdio.h>

void    ft_bzero(void *s, size_t n)
{
    unsigned char   *temp;

    temp = (unsigned char*)s;
    while (n--)
        *temp++ = 0;
}ft_memcpy.c/    0           0     0     644     263       `
#include "libft.h"

void    *ft_memcpy(void *dst, const void *src, size_t n)
{
    unsigned char   *temp;
    unsigned char   *temp2;

    temp = (unsigned char *)dst;
    temp2 = (unsigned char *)src;
    while (n--)
        *temp++ = *temp2++;
    return dst;
}
ft_memchr.c/    0           0     0     644     314       `
#include "libft.h"

void *ft_memchr(const void *s, int c, size_t n)
{
    unsigned char   *temp_s;
    unsigned char   temp_c;

    temp_c = (unsigned char)c;
    temp_s = (unsigned char *)s;
    while (n--)
    {
        if (temp_c == *temp_s)
            return temp_s;
        temp_s++;
    }
    return NULL;
}ft_memcmp.c/    0           0     0     644     403       `
#include "libft.h"

int ft_memcmp(const void *s1, const void *s2, size_t n)
{
    unsigned char   *temp_s1;
    unsigned char   *temp_s2;

    temp_s1 = (unsigned char *)s1;
    temp_s2 = (unsigned char *)s2;
    while (n--)
    {
        if (*temp_s1 > *temp_s2)
            return *temp_s1 - *temp_s2;
        else if (*temp_s2 > *temp_s1)
            return *temp_s1 - *temp_s2;
    }
    return 0;
}
ft_atoi.c/      0           0     0     644     540       `
#include "libft.h"

int ft_atoi(const char *str)
{
    int i;
    int sign;

    i = 0;
    sign = -1;
    while (*str == ' ' || *str == '\f' || *str == '\n'
            || *str == '\r' || *str == '\t' || *str == '\v')
            str++;
    while (*str == '-' || *str == '+')
    {
        if (*str == '-')
            sign *= -1;
        str++;
    }
    while (*str)
    {
        if (*str >= '0' && *str <= '9')
            i = (*str - '0') + i * 10;
        else
            break;
        str++;
    }
    i *= sign;
    return (i);
}ft_isalpha.c/   0           0     0     644     145       `
#include "libft.h"

int ft_isalpha(int c)
{
    if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
        return c;
    else
        return 0;
}
ft_isdigit.c/   0           0     0     644     118       `
#include "libft.h"

int ft_isdigit(int c)
{
    if (c >= 48 && c <= 57)
        return c;
    else
        return 0;
}ft_isalnum.c/   0           0     0     644     139       `
#include "libft.h"

int ft_isalnum(int c)
{
    if (ft_isalpha(c) > 0 || ft_isdigit(c) > 0)
        return c;
    else
        return 0;
}

ft_isascii.c/   0           0     0     644     118       `
#include "libft.h"

int ft_isascii(int c)
{
    if (c >= 0 && c <= 127)
        return c;
    else
        return 0;
}ft_isprint.c/   0           0     0     644     119       `
#include "libft.h"

int ft_isprint(int c)
{
    if (c >= 32 && c <= 126)
        return c;
    else
        return 0;
}
ft_toupper.c/   0           0     0     644     105       `
#include "libft.h"

int ft_toupper(int c)
{
    if (c >= 97 && c <= 122)
        c -= 32;
    return c;
}
ft_tolower.c/   0           0     0     644     104       `
#include "libft.h"

int ft_tolower(int c)
{
    if (c >= 65 && c <= 90)
        c += 32;
    return c;
}ft_calloc.c/    0           0     0     644     246       `
#include "libft.h"

void    *ft_calloc(size_t count, size_t size)
{
    if (count == 0 || size == 0)
    {
        count = 1;
        size = 1;
    }
    ptr = malloc(count * size);
    if (ptr)
        bzero(ptr, count, *size);
    return ptr;
}ft_strdup.c/    0           0     0     644     288       `
#include "libft.h"

char    *strdup(const char *s1)
{
    size_t  len;
    char    *sp;
    size_t  i;

    i = 0;
    len = ft_strlen(s1);
    sp = (char *)malloc(len + 1);
    if (sp)
    {
        while (i++ <= len)
        {
            sp[i] = s1[i];
        }
    }
    return sp;
}